:template
#define <className>_Class_Source
#include "<classSourceFileStem>.xih"

SOM_Scope boolean  SOMLINK somtGenerateSections(<className> *somSelf)
{
    /* <className>Data *somThis = <className>GetData(somSelf); */
    SOMTClassEntryC *cls = somSelf->_get_somtTargetClass();
    SOMTTemplateOutputC *templte = somSelf->_get_somtTemplate();
    <className>MethodDebug("<className>","somtGenerateSections");

    /*
     * Setup symbols that are common to the whole file 
     */
    somSelf->somtFileSymbols();

    somSelf->somtEmitProlog();

    if (cls != (SOMTClassEntryC *) NULL) {
        somSelf->somtScanBases(
                       "somtEmitBaseIncludesProlog",
                       "somtEmitBaseIncludes",
                       "somtEmitBaseIncludesEpilog");

        somSelf->somtEmitMetaInclude();

        somSelf->somtEmitClass();

        somSelf->somtScanBases(
                       "somtEmitBaseProlog",
                       "somtEmitBase",
                       "somtEmitBaseEpilog");

        somSelf->somtEmitMeta();
    }
    somSelf->somtScanConstants("somtEmitConstantProlog",
                      "somtEmitConstant", "somtEmitConstantEpilog");

    somSelf->somtScanTypedefs("somtEmitTypedefProlog",
                      "somtEmitTypedef", "somtEmitTypedefEpilog");

    somSelf->somtScanStructs("somtEmitStructProlog",
                     "somtEmitStruct", "somtEmitStructEpilog");

    somSelf->somtScanUnions("somtEmitUnionProlog",
                    "somtEmitUnion", "somtEmitUnionEpilog");

    somSelf->somtScanEnums("somtEmitEnumProlog",
                   "somtEmitEnum", "somtEmitEnumEpilog");

    if (cls != (SOMTClassEntryC *) NULL) {
        somSelf->somtScanAttributes("somtEmitAttributeProlog",
                            "somtEmitAttribute", "somtEmitAttributeEpilog");

        somSelf->somtScanMethods(
                         "somtImplemented",
                         "somtEmitMethodsProlog",
                         "somtEmitMethod",
                         "somtEmitMethodsEpilog",
                         FALSE);

        somSelf->somtEmitRelease();

        somSelf->somtScanPassthru(TRUE,
                          "somtEmitPassthruProlog",
                          "somtEmitPassthru",
                          "somtEmitPassthruEpilog");

        somSelf->somtScanPassthru(FALSE,
                          "somtEmitPassthruProlog",
                          "somtEmitPassthru",
                          "somtEmitPassthruEpilog");

        somSelf->somtScanData(
                      "somtEmitDataProlog",
                      "somtEmitData",
                      "somtEmitDataEpilog");
    }

    if (somSelf->_get_somtTargetModule() != (SOMTModuleEntryC *) NULL) {

        somSelf->somtScanInterfaces("somtEmitInterfaceProlog",
                            "somtEmitInterface", "somtEmitInterfaceEpilog");

        somSelf->somtScanModules("somtEmitModuleProlog",
                         "somtEmitModule", "somtEmitModuleEpilog");
    }

    somSelf->somtEmitEpilog();

    return (TRUE);
}
