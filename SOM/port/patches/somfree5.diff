diff -urN somfree/sc/src/sc.c newsomfree/sc/src/sc.c
--- somfree/sc/src/sc.c	2024-09-06 06:43:34.174164238 +0300
+++ newsomfree/sc/src/sc.c	2024-09-06 03:45:00.000000000 +0300
@@ -1,8 +1,10 @@
 /**************************************************************************
  *
  *  Copyright 2008, Roger Brown
+ *  Copyright 2022, Yuri Prokushev
  *
  *  This file is part of Roger Brown's Toolkit.
+ *  This file is part of osFree project.
  *
  *  This program is free software: you can redistribute it and/or modify it
  *  under the terms of the GNU Lesser General Public License as published by the
@@ -29,18 +31,33 @@
  * SMINCLUDE include dirs for IDL files
  * SMKNOWNEXTS add headers to user written emitters
  * SOMIR for IR emitter
- * SMTMP for temporary variables
+ * SMTMP for temporary variables (@todo)
+ * SMADDSTAR (@todo)
  */
 
 #include <rhbopt.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <sys/stat.h>
+#ifdef _WIN32
+#include <io.h>
+#else
+#include <unistd.h>
+#endif
 
 #ifdef _WIN32
 #include <windows.h>
 #endif
 
+#ifdef __OS2__
+#define INCL_DOSPROCESS
+#define INCL_DOSMODULEMGR
+#include <os2.h>
+#endif
+
+//#define _USE_PIPES_
+
 typedef struct 
 {
 	size_t _length,_maximum;
@@ -122,7 +139,7 @@
 		while (p[len])
 		{
 			if (p[len]==
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__OS2__) || defined(__DOS__)
 				';'
 #else
 				':'
@@ -156,6 +173,7 @@
 	}
 }
 
+#ifdef _USE_PIPES_
 static BOOL shareable(HANDLE *ph)
 {
 	return DuplicateHandle(
@@ -167,10 +185,12 @@
 		TRUE,
 		DUPLICATE_SAME_ACCESS|DUPLICATE_CLOSE_SOURCE);
 }
+#endif
 
 static int load_somir(const char *app,const char *f)
 {
 	int retVal=1;
+#ifdef _WIN32
 	HMODULE hMod=GetModuleHandle(NULL);
 	if (hMod)
 	{
@@ -215,10 +235,78 @@
 	{
 		fprintf(stderr,"%s: failed to create \"%s\"\n",app,f);
 	}
-
+#else
+#endif
 	return retVal;
 }
 
+/*
+
+Options found in SOM Compiler but not know how it works
+
+e not found info yet
+q not found info yet
+
+*/
+
+void usage(void)
+{
+  printf("usage: sc [-C:D:E:I:S:VU:cd:hi:m:prsvw] f1 f2 ...\n");
+  printf("Where:\n");
+  printf("        -C <n>            - size of comment buffer (default: 200000)\n");
+  printf("        -D <DEFINE>       - same as -D option for cpp.\n");
+  printf("        -E <var>=<value>  - set environment variable.\n");
+  printf("        -I <INCLUDE>      - same as -I option for cpp.\n");
+  printf("        -S <n>            - size of string buffer (default: 200000)\n");
+  printf("        -U <UNDEFINE>     - same as -U option for cpp.\n");
+  printf("        -V                - show version number of compiler.\n");
+  printf("        -c                - ignore all comments.\n");
+  printf("        -d <dir>          - output directory for each emitted file.\n");
+  printf("        -o <dir>          - -d option alias.\n");
+  printf("        -h                - this message.\n");
+  printf("        -?                - -h option alias.\n");
+  printf("        -i <file>         - use this file name as supplied.\n");
+  printf("        -m <name[=value]> - add global modifier.\n");
+  printf("        -p                - shorthand for -D__PRIVATE__.\n");
+  printf("        -r                - check releaseorder entries exist (default: FALSE).\n");
+  printf("        -s <string>       - replace SMEMIT variable with <string>\n");
+  printf("        -e <string>       - -s option alias.\n");
+  printf("        -u                - update interface repository.\n");
+  printf("        -v                - verbose debugging mode (default: FALSE).\n");
+  printf("        -w                - don't display warnings (default: FALSE).\n");
+  printf("        -\%                - show percent of processed files.\n");
+  printf("\n");
+  printf("Modifiers:\n");
+  printf("        addprefixes : adds 'functionprefix' to method names in template file\n");
+  printf("        [no]addstar : [no]add '*' to C bindings for interface references.\n");
+  printf("              corba : check the source for CORBA compliance.\n");
+  printf("                csc : force running of OIDL compiler.\n");
+  printf("         emitappend : append the emitted files at the end of existing file.\n");
+  printf("           noheader : don't add a header to the emitted file.\n");
+  printf("              noint : don't warn about 'int' causing portability problems.\n");
+  printf("             nolock : don't lock the IR during update.\n");
+  printf("               nopp : don't run the source through the pre-processor.\n");
+  printf("               notc : don't use typecodes for emit information.\n");
+  printf("         nouseshort : don't generate short names for types.\n");
+  printf("          pp=<path> : specify a local pre-processor to use.\n");
+  printf("           tcconsts : generate CORBA TypeCode constants.\n");
+  printf("\n");
+  printf("Note: All command-line modifiers can be set in the environment\n");
+  printf("by changing them to UPPERCASE and preappending 'SM' to them.\n");
+  printf("\n");
+  printf("Environment Variables (current state):\n");
+  printf("        SMEMIT=%s\n", getenv("SMEMIT"));
+  printf("                : emitters to run (default : h;ih).\n");
+  printf("        SMINCLUDE=%s\n", getenv("SMINCLUDE"));
+  printf("                : where to search for .idl and .efw files.\n");
+  printf("        SMKNOWNEXTS=%s\n", getenv("SMKNOWNEXTS"));
+  printf("                : add headers to user written emitters.\n");
+  printf("        SMADDSTAR=%s\n", getenv("SMADDSTAR"));
+  printf("                : add or no '*' to C bindings for interface references.\n");
+  printf("        SMEMITAPPEND=%s\n", getenv("SMEMITAPPEND"));
+  printf("                : append the emitted files at the end of existing file.\n");
+}
+
 int main(int argc,char **argv)
 {
 	item *emitters=NULL;
@@ -226,9 +314,15 @@
 	char *outputDir=NULL;
 	item *includes=NULL;
 	item *defines=NULL;
+        item *undefines=NULL;
 	item *modifiers=NULL;
 	int i=1;
 	int update=0;
+        int verbose=1;
+        int warnings=0;
+        int releaseorder=0;
+        int nocomments=1;
+        int showpercent=0;
 	char *app=argv[0];
 	static _IDL_SEQUENCE_char zero={1,1,""};
 
@@ -236,26 +330,45 @@
 
 #ifdef _PLATFORM_WIN32_
 	add_many(&defines,"_PLATFORM_WIN32_");
-#else
-#error missing _PLATFORM_WIN32_
+        add_many(&defines,"_WIN32");
+#endif
+
+#ifdef _PLATFORM_UNIX_
+        add_many(&defines,"_PLATFORM_UNIX_");
 #endif
 
+#ifdef _PLATFORM_X11_
+        add_many(&defines,"_PLATFORM_X11_");
+#endif
+
+        add_many(&defines,"__SOMIDL_VERSION_1__");
+
 	while (i < argc)
 	{
 		char *p=argv[i++];
 
 		if ((*p=='-')
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__OS2__)
 			||(*p=='/')
 #endif
 			)
 		{
 			switch (p[1])
 			{
-			case 'p':
+                        case 'p': // Alias for -D__PRIVATE__
 				add_many(&defines,"__PRIVATE__");
 				break;
-			case 'D':
+                        case 'E': // Set environment variable
+                                if (p[2])
+                                {
+                                        setenv(p+2,"1",1);
+                                }
+                                else
+                                {
+                                        setenv(argv[i++],"1",1);
+                                }
+                                break;
+                        case 'D': // DEFINE
 				if (p[2])
 				{
 					add_many(&defines,p+2);
@@ -265,7 +378,18 @@
 					add_many(&defines,argv[i++]);
 				}
 				break;
-			case 'm':
+                        case 'U': // UNDEFINE
+                                if (p[2])
+                                {
+                                        add_many(&undefines,p+2);
+                                }
+                                else
+                                {
+                                        add_many(&undefines,argv[i++]);
+                                }
+                                break;
+                        case 'a': // Undocumented. Same as -m. Comes from SOM 1.0 Compiler and was named as global attribute.
+                        case 'm': // Global modifier
 				if (p[2])
 				{
 					add_many(&modifiers,p+2);
@@ -275,7 +399,7 @@
 					add_many(&modifiers,argv[i++]);
 				}
 				break;
-			case 'I':
+                        case 'I': // Includes
 				if (p[2])
 				{
 					add_many(&includes,p+2);
@@ -285,8 +409,8 @@
 					add_many(&includes,argv[i++]);
 				}
 				break;
-			case 's':
-			case 'e':
+                        case 's': // Emitters list
+                        case 'e': // Seems to be this option used by original SOM Compiler for another tasks
 				if (p[2])
 				{
 					add_many(&emitters,p+2);
@@ -296,8 +420,8 @@
 					add_many(&emitters,argv[i++]);
 				}
 				break;
-			case 'd':
-			case 'o':
+                        case 'd': // Output directory
+                        case 'o': // Output directory
 				if (outputDir)
 				{
 					fprintf(stderr,"%s: output dir already set\n",app);
@@ -312,11 +436,64 @@
 					outputDir=argv[i++];
 				}
 				break;
-			case 'u':
+                        case 'u': // update IR
 				update=1;
+                                add_many(&emitters,"ir");
+                                add_many(&modifiers,"updateir");
+                                break;
+                        case 'h': // Help
+                        case 'H': // Help
+                        case '?': // Help
+                                usage();
+                                return 0;
+                        case 'q': // unknown. Seems to be passed to somipc
+                                break;
+                        case 0x01: // Easter egg. Info about authors
+                                printf("somFree Compiler\n");
+                                break;
+                        case 'C': // comment buffer //ignored
+                                break;
+                        case 'S': // string buffer //ignored
+                                break;
+                        case 'v': // verbose mode
+                                verbose=1;
+                                break;
+                        case 'w': // show warnings
+                                warnings=1;
+                                break;
+                        case '%': // show percent
+                                showpercent=1;
+                                break;
+                        case 'c': // ignore all comments
+                                nocomments=1;
+                                break;
+                        case 'r': // check releaseorder
+                                releaseorder=1;
+                                break;
+                        case 'V':
+                                printf("somFree Compiler: 'sc', Version: 1.00.\n");
+                                printf("Copyright 2008, Roger Brown\n");
+                                printf("Copyright 2022, Yuri Prokushev\n");
+                                printf("This file is part of Roger Brown's Toolkit.\n");
+                                printf("This file is part of osFree project.\n");
+                                printf("Date Last Compiled: [" __DATE__ "]\n");
+                                return 0;
+                        case 'i':
+/*                              item *t=itemNew(p,strlen(p));
+                                if (idls)
+                                {
+                                        item *p=idls;
+                                        while (p->next) p=p->next;
+                                        p->next=t;
+                                }
+                                else
+                                {
+                                        idls=t;
+                                }*/
 				break;
 			default:
 				fprintf(stderr,"%s: unknown switch - \"%s\"\n",app,p);
+                                usage();
 				return 1;
 			}
 		}
@@ -367,21 +544,43 @@
 
 			while (emitter)
 			{
-				_IDL_SEQUENCE_char somcpp={0,0,NULL};
-				_IDL_SEQUENCE_char somipc={0,0,NULL};
-				_IDL_SEQUENCE_char idlname={0,0,NULL};
+                                _IDL_SEQUENCE_char somcpp={0,0,NULL};   // SOM IDL Pre-Processor
+                                _IDL_SEQUENCE_char somipc={0,0,NULL};   // SOM IDL Compiler (no Emitter Framework)
+                                _IDL_SEQUENCE_char somipc2={0,0,NULL};  // SOM IDL Compiler (Emitter Framework)
+                                _IDL_SEQUENCE_char spp={0,0,NULL};      // SOM OIDL Pre-Processor
+                                _IDL_SEQUENCE_char somopc={0,0,NULL};   // SOM OIDL Compiler (CSC to IDL converter)
+                                _IDL_SEQUENCE_char idlname={0,0,NULL};  // IDL FQFN
 				char buf[512];
-				long len=GetModuleFileName(NULL,buf,sizeof(buf));
 				item *t;
 				size_t ul=0,ul2=0;
-				int appPathSpaces=has_spaces(buf,len);
+                                int appPathSpaces=0;
+                                long len;
+#ifdef _WIN32
+                                len=GetModuleFileName(NULL,buf,sizeof(buf));
+#elif __OS2__
+                                PTIB ptib;
+                                PPIB ppib;
+
+                                if ( !(DosGetInfoBlocks(&ptib, &ppib)) )
+                                   DosQueryModuleName(ppib->pib_hmte, sizeof(buf), buf);
+
+                                len=strlen(buf);
+#else
+                                len=1;
+#endif
+
+#if !defined(_WIN32) && !defined(__OS2__)
+                                buf[0]=0x0;
+#endif
+
+                                appPathSpaces=has_spaces(buf,len);
 
 				/* get to start of file name */
 
 				while (len--)
 				{
 					if (
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__OS2__) || defined(__DOS__)
 						(buf[len]=='/')||
 #endif
 						(buf[len]=='\\'))
@@ -393,20 +592,23 @@
 
 				if (appPathSpaces)
 				{
+                                        add_str(&somipc2,"\"");
 					add_str(&somipc,"\"");
 					add_str(&somcpp,"\"");
 				}
 
-				strncpy(buf+len,"somipc.exe",sizeof(buf)-len);
+                                strncpy(buf+len,"somipc2.exe",sizeof(buf)-len);
+                                add_str(&somipc2,buf);
 
+                                strncpy(buf+len,"somipc.exe",sizeof(buf)-len);
 				add_str(&somipc,buf);
 
 				strncpy(buf+len,"somcpp.exe",sizeof(buf)-len);
-
 				add_str(&somcpp,buf);
 
 				if (appPathSpaces)
 				{
+                                        add_str(&somipc2,"\"");
 					add_str(&somipc,"\"");
 					add_str(&somcpp,"\"");
 				}
@@ -455,6 +657,16 @@
 					t=t->next;
 				}
 
+                                t=undefines;
+
+                                while (t)
+                                {
+                                        add_str(&somcpp," -U");
+                                        add_seq(&somcpp,&t->data);
+
+                                        t=t->next;
+                                }
+
 				t=includes;
 
 				while (t)
@@ -470,17 +682,45 @@
 				}
 
 				{
+                                        add_str(&somipc2," -s");
 					add_str(&somipc," -s");
+                                        add_seq(&somipc2,&emitter->data);
 					add_seq(&somipc,&emitter->data);
 				}
 
+                                if (verbose)
+                                {
+                                        add_str(&somipc2," -v ");
+                                        add_str(&somipc," -v ");
+                                }
+
+                                if (warnings)
+                                {
+                                        add_str(&somipc2," -w ");
+                                        add_str(&somipc," -w ");
+                                }
+
+                                if (releaseorder)
+                                {
+                                        add_str(&somipc2," -r ");
+                                        add_str(&somipc," -r ");
+                                }
+
+                                if (nocomments)
+                                {
+                                        add_str(&somipc2," -c ");
+                                        add_str(&somipc," -c ");
+                                } else {
+                                        add_str(&somcpp," -C ");
+                                }
+
+                                add_str(&somipc2," -o ");
 				add_str(&somipc," -o ");
 
 				if ((emitter->data._length==2)&&(!memcmp(emitter->data._buffer,"ir",2)))
 				{
 					char *ir=getenv("SOMIR");
 					char *filename;
-					long attr;
 
 					if (!ir) 
 					{
@@ -498,6 +738,10 @@
 
 /*					fprintf(stderr,"%s: ir output file is \"%s\"\n",app,filename);*/
 
+#if 0
+                                        {
+                                        long attr;
+
 					attr=GetFileAttributes(filename);
 
 					if (attr < 0)
@@ -509,20 +753,47 @@
 							return 1;
 						}
 					}
+                                        }
+#else
+                                        {
+                                        struct stat   buffer;
+
+                                        if (!(stat(filename, &buffer) == 0))
+                                        {
+                                                fprintf(stderr,"%s,\"%s\" does not exist\n",app,filename);
 
+                                                if (load_somir(app,filename))
+                                                {
+                                                        return 1;
+                                                }
+                                        }
+                                        }
+#endif
+                                        add_str(&somipc2,filename);
 					add_str(&somipc,filename);
+                                        add_str(&somipc2," ");
 					add_str(&somipc," ");
 				}
 				else
 				{
 					if (outputDir)
 					{
+                                                add_str(&somipc2,outputDir);
 						add_str(&somipc,outputDir);
+#if defined(_WIN32) || defined(__OS2__) || defined(__DOS__)
+                                                add_str(&somipc2,"\\");
 						add_str(&somipc,"\\");
+#else
+                                                add_str(&somipc2,"/");
+                                                add_str(&somipc,"/");
+#endif
 					}
 
+                                        add_seq(&somipc2,&idlname);
 					add_seq(&somipc,&idlname);
+                                        add_str(&somipc2,".");
 					add_str(&somipc,".");
+                                        add_seq(&somipc2,&emitter->data);
 					add_seq(&somipc,&emitter->data);
 				}
 
@@ -530,21 +801,19 @@
 
 				while (t)
 				{
+                                        add_str(&somipc2," -m ");
 					add_str(&somipc," -m ");
+                                        add_seq(&somipc2,&t->data);
 					add_seq(&somipc,&t->data);
 
 					t=t->next;
 				}
 
+#ifdef _USE_PIPES_
+                                {
 				add_seq(&somcpp,&zero);
+                                        add_seq(&somipc2,&zero);
 				add_seq(&somipc,&zero);
-
-#if 1
-				printf("somcpp: %s\n",somcpp._buffer);
-				printf("somipc: %s\n",somipc._buffer);
-#endif
-
-				{
 					STARTUPINFO cpp_startup,somipc_startup;
 					PROCESS_INFORMATION cpp_pinfo={0,0,0,0},somipc_pinfo={0,0,0,0};
 					BOOL b=TRUE;
@@ -662,7 +931,104 @@
 						return 1;
 					}
 				}
+#else
+                                {
+                                        char name2[L_tmpnam];
+                                        int cppExitCode;
+                                        int somipcExitCode;
+                                        _IDL_SEQUENCE_char tmpf={0,0,NULL};
+                                        char *tmpdir = "/tmp";          // Default value for most UNIXes
+#if defined(__OS2__) || defined(_WIN32)
+                                        struct stat   buffer;
+#endif
+                                        tmpnam(name2);
+#if defined(_WIN32) || defined(__OS2__) || defined(__DOS__)
+                                        tmpdir = getenv("TMP");
+#endif
+                                        add_str(&tmpf, tmpdir);
+#if defined(_WIN32) || defined(__OS2__) || defined(__DOS__)
+                                        add_str(&tmpf,"\\");
+#else
+                                        add_str(&tmpf,"/");
+#endif
+                                        add_str(&tmpf,&name2);
 
+                                        add_str(&somcpp," ");
+                                        add_seq(&somcpp,&idl->data);
+                                        add_str(&somcpp," > ");
+                                        add_seq(&somcpp,&tmpf);
+
+                                        add_str(&somipc2," ");
+                                        add_str(&somipc," ");
+                                        add_seq(&somipc2,&tmpf);
+                                        add_seq(&somipc,&tmpf);
+
+                                        add_seq(&somcpp,&zero);
+                                        add_seq(&somipc2,&zero);
+                                        add_seq(&somipc,&zero);
+
+                                        if (verbose)
+                                        {
+                                                add_str(&somipc2," -v ");
+                                                add_str(&somipc," -v ");
+
+                                                printf("Running shell command:\n");
+                                                printf("%s\n",somcpp._buffer);
+                                        }
+
+                                        cppExitCode=system(somcpp._buffer);
+
+#if !definded(__OS2__) && !defined(_WIN32)
+
+                                        if (verbose)
+                                        {
+                                                printf("%s\n",somipc2._buffer);
+                                        }
+                                        somipcExitCode=system(somipc2._buffer);
+                                        #ifdef __LINUX__
+                                        if (somipcExitCode==127)
+                                        #endif
+#else
+
+                                        if (!(stat(somipc2._buffer, &buffer) == 0))
+#endif
+                                        {
+                                                if (verbose)
+                                                {
+                                                        printf("%s\n",somipc._buffer);
+                                                }
+                                                somipcExitCode=system(somipc._buffer);
+                                        }
+#if definded(__OS2__) || defined(_WIN32)
+										else {
+												if (verbose)
+												{
+														printf("%s\n",somipc2._buffer);
+												}
+												somipcExitCode=system(somipc2._buffer);
+										}
+#endif
+                                        if (verbose)
+                                        {
+                                                if (somipcExitCode)
+                                                {
+                                                        printf("Status: %d\n", somipcExitCode);
+                                                }
+                                        }
+
+                                        unlink(tmpf._buffer);
+                                        if (verbose)
+                                        {
+                                                printf("Removed  \"%s\"\n", tmpf._buffer);
+                                        }
+
+                                        if (somipcExitCode || cppExitCode)
+                                        {
+                                                return cppExitCode ? cppExitCode : somipcExitCode;
+                                        }
+
+                                }
+#endif
 				emitter=emitter->next;
 			}
 
